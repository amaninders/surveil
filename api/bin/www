#!/usr/bin/env node

// Load additional environment variables from .env files
require("dotenv").config();

/**
 * Module dependencies.
 */

require("express-async-errors");

const app = require("../src/app");
const debug = require("debug")("api:server");
const http = require("http");

/**
 * Event listener for HTTP server "error" event.
 */

const onError = error => {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string"
    ? "Pipe " + port
    : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case "EACCES":
    console.error(bind + " requires elevated privileges");
    process.exit(1);
    break;
  case "EADDRINUSE":
    console.error(bind + " is already in use");
    process.exit(1);
    break;
  default:
    throw error;
  }
};

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === "string"
    ? "pipe " + addr
    : "port " + addr.port;
  debug("Listening on " + bind);
};

/**
 * Get port from environment and store in Express.
 */

const port = Number(process.env.PORT || "8000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.on("error", onError);
server.on("listening", onListening);

(async function() {
  // Load models and create any tables that don't already exist
  const { sequelize } = require("../src/models");
  await sequelize.sync();

  // Listen on port
  server.listen(port);
})();